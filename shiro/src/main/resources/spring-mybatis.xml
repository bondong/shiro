<?xml version="1.0" encoding="utf-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
    		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
			http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd"
			>
	<!-- 自动扫描(自动注入) -->
	<context:component-scan base-package="com.shop.core.*.service;com.shop.core.*.*.service"/>
	<!-- 定时调用存储过程 -->
	<!-- <context:component-scan base-package="com.shop.common.timer"/> -->
	
	<bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">
    	<property name="resultSetLogEnabled" value="true" />
	</bean>
	<!-- 配置数据源 -->
	<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
<!--		<property name="driverClassName" value="${jdbc.driverClassName}" /> -->
		<property name="url" value="${jdbc.url}" /> 
		<property name="username" value="${jdbc.username}" /> 
		<property name="password" value="${jdbc.password}" /> 
		<property name="initialSize" value="${jdbc.initialSize}" /> 
	    <property name="minIdle" value="${jdbc.minIdle}" /> 
	    <property name="maxActive" value="${jdbc.maxActive}" /> 
	    <property name="maxWait" value="${jdbc.maxWait}" /> 
	    <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" /> 
	    <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" /> 
	    <property name="validationQuery" value="${jdbc.validationQuery}" /> 
	    <property name="testWhileIdle" value="${jdbc.testWhileIdle}" /> 
	    <property name="testOnBorrow" value="${jdbc.testOnBorrow}" /> 
	    <property name="testOnReturn" value="${jdbc.testOnReturn}" /> 
	    <property name="removeAbandoned" value="${jdbc.removeAbandoned}" /> 
	    <property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}" /> 
		<!--<property name="logAbandoned" value="${jdbc.logAbandoned}" /> -->
	    <property name="filters" value="${jdbc.filters}" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />
		<property name="proxyFilters">
	        <list>
	            <ref bean="log-filter"/>
	        </list>
	    </property>
		<!-- 监控数据库 -->
		<!-- <property name="filters" value="stat" /> -->
		<!--<property name="filters" value="mergeStat" />-->
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 翻页插件 -->
		<property name="plugins">
		    <array>
		      <bean class="com.github.pagehelper.PageInterceptor">
		        <property name="properties">
		          <!-- 使用下面的方式配置参数，一行配置一个 -->
		          <value>
		            helperDialect=mysql
		          </value>
		        </property>
		      </bean>
		    </array>
		</property> 
		<!-- 指定mybatis的全局配置文件 -->
		<!-- <property name="configLocation" value="classpath:mybatis-config.xml" />  -->
		<property name="typeAliasesPackage" value="com.shop.common.entity,com.shop.core.model" />
		<property name="mapperLocations"  >
			<list>
				<value>classpath:com/shop/core/mapper/*.xml</value>
				<value>classpath:com/shop/common/mapper/*.xml</value>
			</list>
		</property>
	</bean>

	<!-- Mapper映射文件的包扫描器 -->
	<!-- <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"> -->
	<bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.shop.common.mapper,com.shop.core.dao" />
		<!-- <property name="properties">
        <value>
            mappers=tk.mybatis.mapper.common.Mapper,tk.mybatis.mapper.common.special.InsertListMapper
        </value>
    	</property> -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean> 
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	
	<bean id="baseMybatisDao" class="com.shop.core.mybatis.BaseMybatisDao" >
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>	

	
	
	 <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	     <property name="dataSource" ref="dataSource" />
	 </bean>
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!--所有以query开头的方法都是只读的 -->
			<tx:method name="query*" read-only="true" />
			<!--其他方法使用默认事务策略 -->
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>
 	<!-- AOP配置--> 
 	<!--pointcut元素定义一个切入点，execution中的第一个星号 用以匹配方法的返回类型，这里星号表明匹配所有返回类型。 
 		.*.*(..)表明匹配包下的所有类的所有方法 -->
	<aop:config>
		<aop:pointcut id="myPointcut" expression="execution(public * com.shop.core.auth.service.impl.*.*(..)) 
		or execution(public * com.shop.common.service.impl.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="myPointcut" />
	</aop:config>
<!--	<aop:config>-->
<!--		<aop:pointcut id="myPointcut"-->
<!--			expression="execution(public * net.wenyifan.*.service.*.*(..))" />-->
<!--		<aop:advisor advice-ref="txAdvice" pointcut-ref="myPointcut" />-->
<!--	</aop:config>-->
</beans>